#!/usr/bin/env python3
# drive_manager.py - Google Drive integration for SmartFarm model management

import os
import json
import pickle
import shutil
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, List, Tuple

try:
    from google.auth.transport.requests import Request
    from google.oauth2.credentials import Credentials
    from google_auth_oauthlib.flow import InstalledAppFlow
    from googleapiclient.discovery import build
    from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
    import io
    GOOGLE_DRIVE_AVAILABLE = True
except ImportError:
    GOOGLE_DRIVE_AVAILABLE = False
    print("Google Drive k√ºt√ºphaneleri bulunamadƒ±. 'pip install -r requirements.txt' √ßalƒ±≈ütƒ±rƒ±n.")

# Google Drive API kapsamlarƒ±
SCOPES = ['https://www.googleapis.com/auth/drive.file']

class DriveManager:
    """Google Drive ile model y√∂netimi i√ßin sƒ±nƒ±f"""
    
    def __init__(self, credentials_path: str = "credentials.json", token_path: str = "token.pickle"):
        self.credentials_path = credentials_path
        self.token_path = token_path
        self.service = None
        self.drive_folder_id = None
        self.project_name = None
        
    def authenticate(self) -> bool:
        """Google Drive kimlik doƒürulama"""
        if not GOOGLE_DRIVE_AVAILABLE:
            print("‚ùå Google Drive k√ºt√ºphaneleri y√ºkl√º deƒüil!")
            return False
            
        creds = None
        
        # Token dosyasƒ± varsa y√ºkle
        if os.path.exists(self.token_path):
            with open(self.token_path, 'rb') as token:
                creds = pickle.load(token)
        
        # Ge√ßerli kimlik bilgileri yoksa veya s√ºresi dolmu≈üsa
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                if not os.path.exists(self.credentials_path):
                    print(f"‚ùå Kimlik dosyasƒ± bulunamadƒ±: {self.credentials_path}")
                    print("Google Cloud Console'dan OAuth 2.0 credentials indirin ve 'credentials.json' olarak kaydedin.")
                    return False
                    
                flow = InstalledAppFlow.from_client_secrets_file(
                    self.credentials_path, SCOPES)
                creds = flow.run_local_server(port=0)
            
            # Token'ƒ± kaydet
            with open(self.token_path, 'wb') as token:
                pickle.dump(creds, token)
        
        try:
            self.service = build('drive', 'v3', credentials=creds)
            print("‚úÖ Google Drive kimlik doƒürulama ba≈üarƒ±lƒ±!")
            return True
        except Exception as e:
            print(f"‚ùå Google Drive baƒülantƒ± hatasƒ±: {e}")
            return False
    
    def setup_drive_folder(self) -> bool:
        """Drive'da proje klas√∂r√º yapƒ±sƒ±nƒ± olu≈ütur"""
        if not self.service:
            print("‚ùå Google Drive servisi ba≈ülatƒ±lmamƒ±≈ü!")
            return False
        
        # Kullanƒ±cƒ±dan klas√∂r yolu iste
        print("\nüîß Google Drive Klas√∂r Ayarlarƒ±")
        print("√ñrnek: Tarƒ±m/SmartFarm")
        print("Bu, Drive'ƒ±nƒ±zda ≈üu yapƒ±yƒ± olu≈üturacak:")
        print("  üìÅ Tarƒ±m/")
        print("    üìÅ SmartFarm/")
        print("      üìÅ [timestamp]_model/")
        
        folder_path = input("\nDrive'da olu≈üturulacak klas√∂r yolu: ").strip()
        if not folder_path:
            folder_path = "Tarƒ±m/SmartFarm"
            print(f"Varsayƒ±lan klas√∂r kullanƒ±lƒ±yor: {folder_path}")
        
        # Proje adƒ± al
        self.project_name = input("Proje adƒ± (varsayƒ±lan: SmartFarm_Training): ").strip()
        if not self.project_name:
            self.project_name = "SmartFarm_Training"
        
        try:
            # Klas√∂r yapƒ±sƒ±nƒ± olu≈ütur
            folder_parts = folder_path.split('/')
            parent_id = 'root'
            
            for folder_name in folder_parts:
                folder_id = self._find_or_create_folder(folder_name, parent_id)
                if not folder_id:
                    return False
                parent_id = folder_id
            
            # Zaman damgalƒ± proje klas√∂r√º olu≈ütur
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            project_folder_name = f"{timestamp}_{self.project_name}"
            self.drive_folder_id = self._find_or_create_folder(project_folder_name, parent_id)
            
            if self.drive_folder_id:
                print(f"‚úÖ Drive klas√∂r√º olu≈üturuldu: {folder_path}/{project_folder_name}")
                
                # Klas√∂r bilgilerini kaydet
                self._save_drive_config(folder_path, project_folder_name)
                return True
            else:
                print("‚ùå Proje klas√∂r√º olu≈üturulamadƒ±!")
                return False
                
        except Exception as e:
            print(f"‚ùå Klas√∂r olu≈üturma hatasƒ±: {e}")
            return False
    
    def _find_or_create_folder(self, folder_name: str, parent_id: str) -> Optional[str]:
        """Klas√∂r bul veya olu≈ütur"""
        try:
            # √ñnce klas√∂r√ºn var olup olmadƒ±ƒüƒ±nƒ± kontrol et
            query = f"name='{folder_name}' and parents in '{parent_id}' and mimeType='application/vnd.google-apps.folder'"
            results = self.service.files().list(q=query).execute()
            items = results.get('files', [])
            
            if items:
                print(f"üìÅ Mevcut klas√∂r bulundu: {folder_name}")
                return items[0]['id']
            
            # Klas√∂r yoksa olu≈ütur
            folder_metadata = {
                'name': folder_name,
                'parents': [parent_id],
                'mimeType': 'application/vnd.google-apps.folder'
            }
            
            folder = self.service.files().create(body=folder_metadata).execute()
            print(f"üìÅ Yeni klas√∂r olu≈üturuldu: {folder_name}")
            return folder.get('id')
            
        except Exception as e:
            print(f"‚ùå Klas√∂r i≈ülemi hatasƒ± ({folder_name}): {e}")
            return None
    
    def select_existing_folder(self, folder_path: str, project_name: Optional[str] = None) -> bool:
        """Var olan bir klas√∂r√º proje klas√∂r√º olarak ayarla (timestamp olu≈üturmadan).
        folder_path: Drive k√∂k√ºnden itibaren yol, √∂r: "SmartFarm/colab_learn/yolo11_models"
        """
        if not self.service:
            print("‚ùå Google Drive servisi ba≈ülatƒ±lmamƒ±≈ü!")
            return False
        try:
            folder_parts = [p for p in folder_path.split('/') if p]
            parent_id = 'root'
            for part in folder_parts:
                # Bul veya olu≈ütur (mevcutsa bulur, yoksa olu≈üturur)
                fid = self._find_or_create_folder(part, parent_id)
                if not fid:
                    return False
                parent_id = fid
            self.drive_folder_id = parent_id
            # Proje adƒ± ayarla
            self.project_name = project_name or folder_parts[-1]
            # Konfig√ºrasyonu kaydet
            self._save_drive_config('/'.join(folder_parts[:-1]) if len(folder_parts) > 1 else '', folder_parts[-1])
            print(f"‚úÖ Var olan klas√∂r proje klas√∂r√º olarak ayarlandƒ±: {folder_path}")
            return True
        except Exception as e:
            print(f"‚ùå Var olan klas√∂r ayarlanamadƒ±: {e}")
            return False
    
    def _save_drive_config(self, folder_path: str, project_folder_name: str):
        """Drive konfig√ºrasyonunu kaydet"""
        config = {
            'folder_path': folder_path,
            'project_folder_name': project_folder_name,
            'drive_folder_id': self.drive_folder_id,
            'project_name': self.project_name,
            'created_at': datetime.now().isoformat()
        }
        
        with open('drive_config.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Drive konfig√ºrasyonu kaydedildi: drive_config.json")
    
    def load_drive_config(self) -> bool:
        """Kaydedilmi≈ü Drive konfig√ºrasyonunu y√ºkle"""
        if not os.path.exists('drive_config.json'):
            return False
        
        try:
            with open('drive_config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            self.drive_folder_id = config.get('drive_folder_id')
            self.project_name = config.get('project_name')
            
            print(f"üìÇ Drive konfig√ºrasyonu y√ºklendi: {config.get('folder_path')}/{config.get('project_folder_name')}")
            return True
            
        except Exception as e:
            print(f"‚ùå Drive konfig√ºrasyonu y√ºkleme hatasƒ±: {e}")
            return False
    
    def upload_model(self, local_path: str, drive_filename: str) -> bool:
        """Uploads a model file to Google Drive, updating it if it already exists."""
        if not self.service or not self.drive_folder_id:
            print("‚ùå Drive service or folder ID not found!")
            return False

        if not os.path.exists(local_path):
            print(f"‚ùå Model file not found: {local_path}")
            return False

        try:
            # Check if the file already exists in Drive
            query = f"name='{drive_filename}' and parents in '{self.drive_folder_id}' and trashed=false"
            response = self.service.files().list(q=query, fields='files(id)').execute()
            existing_files = response.get('files', [])

            media = MediaFileUpload(local_path, resumable=True)

            if existing_files:
                # Update existing file
                file_id = existing_files[0]['id']
                self.service.files().update(fileId=file_id, media_body=media).execute()
                print(f"‚úÖ Model g√ºncellendi: {drive_filename}")
            else:
                # Create new file
                file_metadata = {'name': drive_filename, 'parents': [self.drive_folder_id]}
                self.service.files().create(body=file_metadata, media_body=media).execute()
                print(f"‚úÖ Model Drive'a y√ºklendi: {drive_filename}")
            
            return True

        except Exception as e:
            print(f"‚ùå Model y√ºkleme hatasƒ±: {e}")
            return False
    
    def _log_upload(self, filename: str, epoch: int, file_id: str, is_best: bool):
        """Y√ºkleme kaydƒ±nƒ± tut"""
        log_entry = {
            'filename': filename,
            'epoch': epoch,
            'file_id': file_id,
            'is_best': is_best,
            'uploaded_at': datetime.now().isoformat()
        }
        
        # Log dosyasƒ±nƒ± g√ºncelle
        log_file = 'drive_uploads.json'
        uploads = []
        
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                uploads = json.load(f)
        
        uploads.append(log_entry)
        
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(uploads, f, indent=2, ensure_ascii=False)
    
    def find_latest_checkpoint(self) -> Tuple[Optional[str], Optional[str]]:
        """Drive klas√∂r√ºnde ve alt klas√∂rlerde 'last.pt' veya 'best.pt' dosyalarƒ±nƒ± recursive ara.
        √ñnce 'last.pt' i√ßin en g√ºncelini, yoksa 'best.pt' i√ßin en g√ºncelini d√∂nd√ºr.
        """
        if not self.service or not self.drive_folder_id:
            return None, None

        try:
            # BFS ile t√ºm alt klas√∂rleri dola≈ü
            from collections import deque
            queue = deque([self.drive_folder_id])
            found_last = []  # (file_id, name, modifiedTime)
            found_best = []

            while queue:
                parent = queue.popleft()
                # √áocuklarƒ± getir (klas√∂r ve dosyalar)
                results = self.service.files().list(
                    q=f"parents in '{parent}' and trashed=false",
                    fields="files(id,name,mimeType,modifiedTime)"
                ).execute()
                items = results.get('files', [])
                for item in items:
                    mime = item.get('mimeType', '')
                    if mime == 'application/vnd.google-apps.folder':
                        queue.append(item['id'])
                    else:
                        name = item.get('name', '')
                        if name == 'last.pt':
                            found_last.append((item['id'], name, item.get('modifiedTime', '')))
                        elif name == 'best.pt':
                            found_best.append((item['id'], name, item.get('modifiedTime', '')))

            def pick_latest(files):
                if not files:
                    return None
                # modifiedTime ISO8601, string olarak kar≈üƒ±la≈ütƒ±rmak da √ßoƒüu zaman yeterlidir
                files.sort(key=lambda x: x[2], reverse=True)
                return files[0][0], files[0][1]

            latest = pick_latest(found_last) or pick_latest(found_best)
            if latest:
                print(f"üîç Drive'da bulundu: {latest[1]}")
                return latest[0], latest[1]
            return None, None

        except Exception as e:
            print(f"‚ùå Drive'da checkpoint arama hatasƒ±: {e}")
            return None, None
    
    def download_checkpoint(self, file_id: str, local_path: str) -> bool:
        """Checkpoint'i Drive'dan indir"""
        if not self.service:
            print("‚ùå Drive servisi ba≈ülatƒ±lmamƒ±≈ü!")
            return False
        
        try:
            # Dosyayƒ± indir
            request = self.service.files().get_media(fileId=file_id)
            
            with open(local_path, 'wb') as f:
                downloader = MediaIoBaseDownload(f, request)
                done = False
                while done is False:
                    status, done = downloader.next_chunk()
                    print(f"üì• ƒ∞ndiriliyor: {int(status.progress() * 100)}%")
            
            print(f"‚úÖ Checkpoint indirildi: {local_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Checkpoint indirme hatasƒ±: {e}")
            return False
    
    def list_drive_models(self) -> List[Dict]:
        """Drive'daki modelleri listele"""
        if not self.service or not self.drive_folder_id:
            return []
        
        try:
            query = f"parents in '{self.drive_folder_id}' and name contains '.pt'"
            results = self.service.files().list(
                q=query,
                fields="files(id,name,size,createdTime,modifiedTime)"
            ).execute()
            
            files = results.get('files', [])
            
            print(f"\nüìã Drive'daki modeller ({len(files)} adet):")
            for i, file in enumerate(files, 1):
                size_mb = int(file.get('size', 0)) / (1024 * 1024)
                created = file.get('createdTime', '')[:19].replace('T', ' ')
                print(f"   {i}. {file['name']} ({size_mb:.1f} MB) - {created}")
            
            return files
            
        except Exception as e:
            print(f"‚ùå Model listeleme hatasƒ±: {e}")
            return []

def setup_drive_integration() -> Optional[DriveManager]:
    """Drive entegrasyonunu kur"""
    print("\nüöÄ Google Drive Entegrasyonu Kurulumu")
    print("=" * 50)
    
    # Credentials dosyasƒ± kontrol√º
    if not os.path.exists("credentials.json"):
        print("‚ùå credentials.json dosyasƒ± bulunamadƒ±!")
        print("\nüìã Kurulum Adƒ±mlarƒ±:")
        print("1. Google Cloud Console'a gidin (https://console.cloud.google.com/)")
        print("2. Yeni proje olu≈üturun veya mevcut projeyi se√ßin")
        print("3. Google Drive API'yi etkinle≈ütirin")
        print("4. OAuth 2.0 Client ID olu≈üturun (Desktop Application)")
        print("5. credentials.json dosyasƒ±nƒ± indirin ve bu klas√∂re koyun")
        print("6. Tekrar √ßalƒ±≈ütƒ±rƒ±n")
        return None
    
    # Drive Manager olu≈ütur
    drive_manager = DriveManager()
    
    # Kimlik doƒürulama
    if not drive_manager.authenticate():
        return None
    
    # Mevcut konfig√ºrasyon var mƒ± kontrol et
    if drive_manager.load_drive_config():
        use_existing = input("\nüìÇ Mevcut Drive konfig√ºrasyonu bulundu. Kullanƒ±lsƒ±n mƒ±? (y/n): ").lower()
        if use_existing.startswith('y'):
            return drive_manager

    # Var olan bir klas√∂r√º kullanmak ister misiniz?
    use_existing_folder = input("\nüìÅ Var olan bir klas√∂r√º kullanmak ister misiniz? (y/n): ").lower()
    if use_existing_folder.startswith('y'):
        print("√ñrnek yol: SmartFarm/colab_learn/yolo11_models")
        folder_path = input("Drive klas√∂r yolu: ").strip()
        if not folder_path:
            print("‚ùå Ge√ßerli bir klas√∂r yolu girilmedi.")
            return None
        if not drive_manager.select_existing_folder(folder_path):
            return None
        return drive_manager

    # Yeni klas√∂r yapƒ±sƒ± kur
    if not drive_manager.setup_drive_folder():
        return None
    
    return drive_manager

if __name__ == "__main__":
    print("Drive Manager - Google Drive entegrasyon mod√ºl√º")
    print("Bu mod√ºl doƒürudan √ßalƒ±≈ütƒ±rƒ±lamaz.")
